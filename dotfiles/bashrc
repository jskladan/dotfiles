# WARN: Keep the unset at the top of the file!
# There is some PROMPT_COMMAND magic later on, and not having this would fuck-up multiple
#   `source ~/.bashrc` executions in one session
unset PROMPT_COMMAND

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# Ignore /etc/hosts
export COMP_KNOWN_HOSTS_WITH_HOSTFILE=''
# Homebrew Bash-completion
[[ -r "/opt/homebrew/etc/profile.d/bash_completion.sh" ]] && . "/opt/homebrew/etc/profile.d/bash_completion.sh"

# Fix homebrew [https://github.com/orgs/Homebrew/discussions/446]
[[ -r "/opt/homebrew/bin/brew" ]] &&  eval "$(/opt/homebrew/bin/brew shellenv)"

# PyENV [https://github.com/pyenv/pyenv#set-up-your-shell-environment-for-pyenv]
if which pyenv > /dev/null 2>&1; then
    export PYENV_ROOT="$HOME/.pyenv"
    export PATH="command -v pyenv >/dev/null || $PYENV_ROOT/bin:$PATH"
    export PATH="command -v shims >/dev/null || $PYENV_ROOT/shims:${PATH}"
    eval "$(pyenv init -)"
    eval "$(pyenv virtualenv-init -)"
fi

# Git
function parse_git_branch {
  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/(\1)/'
}

source ~/.bash_completion.d/git
source ~/.bash_completion.d/git_prompt
export GIT_PS1_SHOWDIRTYSTATE=true
export GIT_PS1_SHOWSTASHSTATE=true
export GIT_PS1_SHOWUNTRACKEDFILES=true

function pagurepr {
    remote="${2:-origin}"
    git fetch $remote pull/$1/head:pr_$1
    git checkout pr_$1
}

# Aliases
alias ls='ls -F --color' # / at the end of dirs; colorized
alias ll='ls -lah'
if which thefuck >> /dev/null; then
    eval $(thefuck --alias)
fi

if command -v nvim >/dev/null; then
    alias vim='nvim'
    export EDITOR=nvim
else
    export EDITOR=vim
fi


# Disable homebrew autoupdate on brew install
export HOMEBREW_NO_AUTO_UPDATE=1

# https://geoff.greer.fm/lscolors/
export LSCOLORS='exfxchbhcxegedabagacad'
export LS_COLORS='di=34:ln=35:so=32;47:pi=31;47:ex=32:bd=34;46:cd=34;43:su=30;41:sg=30;46:tw=30;42:ow=30;43'


# Eternal bash history.
# ---------------------
# Read eternal history to memory
ETERNAL_HISTFILE=~/.bash_history_eternal
touch $ETERNAL_HISTFILE
history -r $ETERNAL_HISTFILE

# Create new histfile for the "session"
mkdir -p ~/.bash_history_sessions
export HISTFILE=~/.bash_history_sessions/$(date '+%Y%m%d_%H%M%S').$$
echo "# HISTFILE=${HISTFILE}" > $HISTFILE

# ignore lines matching the previous history entry
#  +
# ignore lines which begin with a white space character
export HISTCONTROL=ignoreboth

# Undocumented feature which sets the size to "unlimited".
# http://stackoverflow.com/questions/9457233/unlimited-bash-history
export HISTFILESIZE=
export HISTSIZE=

# append the recenly closed session to end on EXIT signal
function historymerge {
    local E1="^(ls|ll|pwd|fg|bg|exit|history|vim \.)$"
    local E2="^git (fetch|pull|push|commit -am .|diff|status)$"
    local E3="^(python runapp\.py|source \.bin.env.activate)$"
    grep -v -E "${E1}|${E2}|${E3}" $HISTFILE >> $ETERNAL_HISTFILE
    rm $HISTFILE
}
trap historymerge EXIT

# Force prompt to write history after every command.
# http://superuser.com/questions/20900/bash-history-loss
shopt -s histappend
PROMPT_COMMAND="history -a; $PROMPT_COMMAND"


# PS1/PROMPT_COMMAND related config
PS1='[\u@\h \w]\n$(__git_ps1 "(%s)")\\$ '


function list_colors_codes {
    for i in $(seq 1 255); do
        echo "38;5;$i $(tput setaf $i)XXX$(tput sgr0)"
    done
}


function __git_ps1_colorized {

    local C_PRE="\e["
    local C_SUF="m"

    local C_DEFAULT="${PROMPT_GIT_COLOR:-${PROMPT_COLOR}}"
    local C_DIRTY="${C_YELLOW}"

    local val=`__git_ps1 "%s"`
    read -ra val_arr <<<"$val" # "safe" way to split string without bash expansion

    case "${#val_arr[@]}" in
        2)
            echo -e "${C_PRE}${C_DIRTY}${C_SUF}(${val})"
            ;;
        *)
            echo -e "${C_PRE}${C_DEFAULT}${C_SUF}(${val})"
            ;;
    esac

    echo -e "${frmt}"
}

C_RED="38;5;196"
C_BLUE="38;5;39"
C_YELLOW="38;5;178"
C_GREEN="38;5;40"
C_GREY="38;5;247"

C_PRE='\[\e['
C_SUF='m\]'
C_RES="${C_PRE}0${C_SUF}"

[[ "$EUID" -ne 0 ]] && PROMPT_COLOR=$C_GREY || PROMPT_COLOR=$C_RED

PROMPT_USERHOST="\u@\h"
PROMPT_SEPARATOR=" "
PROMPT_DIRECTORY="\w"

PS1='${PROMPT_START@P}'
PS1+="${C_PRE}"'${PROMPT_COLOR}'"${C_SUF}"'[${PROMPT_USERHOST@P}'"${C_RES}"
PS1+='${PROMPT_SEPARATOR@P}'
PS1+="${C_PRE}"'${PROMPT_DIR_COLOR:-${PROMPT_COLOR}}'"${C_SUF}"'${PROMPT_DIRECTORY@P}]'"${C_RES}"
PS1+='\n'
PS1+='$(__git_ps1_colorized)'"${C_RES}"
PS1+=' ${PROMPT_END@P}\$'"${C_RES} "

export PS1


export PROMPT_COMMAND_BASE="${PROMPT_COMMAND}"
# Set terminal tab name (and keep it by forcing the 'echo -ne ..') at the end of the PROMPT_COMMAND
function tabset {
    unset PROMPT_COMMAND

    # echo $HOSTNAME --> server.my.domain
    # echo ${HOSTNAME%%.*} --> server
    local host="${HOSTNAME%%.*}"

    case $host in
        Josefs-MacBook-Pro)
            host="MacBook"
            ;;
        fedora-desktop)
            host="Desktop"
            ;;
        *)
            ;;
    esac

    local user=""
    if [[ "$EUID" -eq 0 ]]; then  user="ROOT@"; fi

    local text=""
    if [[ "$1" ]]; then text+="[${*}] "; fi

    local SET_TAB_TEXT='echo -ne "\033]0;'"${text}${user}${host}"'\007"'

    if [[ $PROMPT_COMMAND_BASE =~ .(;|; )$ ]]
    then
        export PROMPT_COMMAND="${PROMPT_COMMAND_BASE} ${SET_TAB_TEXT}; "
    else
        export PROMPT_COMMAND="${PROMPT_COMMAND_BASE}; ${SET_TAB_TEXT}; "
    fi
}

# Set the tab name
tabset
